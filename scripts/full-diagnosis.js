const mysql = require('mysql2/promise');
require('dotenv').config({ path: '.env.local' });

async function fullDiagnosis() {
  try {
    console.log('üîç DIAGNOSTIC COMPLET DU SYST√àME');
    console.log('=' .repeat(80));
    
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      port: parseInt(process.env.DB_PORT || '3306'),
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'stock'
    });
    
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie\n');
    
    // 1. V√âRIFICATION DE LA STRUCTURE DE LA BASE
    console.log('üìã 1. STRUCTURE DE LA BASE DE DONN√âES:');
    console.log('-'.repeat(50));
    
    // V√©rifier les tables
    const [tables] = await connection.execute('SHOW TABLES');
    console.log('Tables existantes:');
    tables.forEach(table => {
      console.log(`  - ${Object.values(table)[0]}`);
    });
    console.log('');
    
    // Structure de la table users
    console.log('Structure de la table users:');
    const [userColumns] = await connection.execute('DESCRIBE users');
    userColumns.forEach(col => {
      console.log(`  ${col.Field}: ${col.Type} ${col.Null === 'NO' ? 'NOT NULL' : 'NULL'} ${col.Key} ${col.Default || ''}`);
    });
    console.log('');
    
    // Structure de la table stocks
    console.log('Structure de la table stocks:');
    const [stockColumns] = await connection.execute('DESCRIBE stocks');
    stockColumns.forEach(col => {
      console.log(`  ${col.Field}: ${col.Type} ${col.Null === 'NO' ? 'NOT NULL' : 'NULL'} ${col.Key} ${col.Default || ''}`);
    });
    console.log('');
    
    // 2. V√âRIFICATION DES DONN√âES
    console.log('üìä 2. DONN√âES DANS LA BASE:');
    console.log('-'.repeat(50));
    
    // Stocks
    const [stocks] = await connection.execute('SELECT * FROM stocks ORDER BY id');
    console.log('Stocks:');
    stocks.forEach(stock => {
      console.log(`  ID: ${stock.id} | Nom: "${stock.name}" | Actif: ${stock.is_active ? 'Oui' : 'Non'}`);
    });
    console.log('');
    
    // Utilisateurs avec d√©tails complets
    const [users] = await connection.execute(`
      SELECT u.*, s.name as stock_name 
      FROM users u 
      LEFT JOIN stocks s ON u.stock_id = s.id 
      ORDER BY u.stock_id, u.role
    `);
    console.log('Utilisateurs:');
    users.forEach(user => {
      const status = user.is_active ? '‚úÖ' : '‚ùå';
      console.log(`  ${status} ID: ${user.id}`);
      console.log(`      Email: ${user.email}`);
      console.log(`      Username: ${user.username}`);
      console.log(`      R√¥le: ${user.role}`);
      console.log(`      Stock ID: ${user.stock_id} (${user.stock_name || 'AUCUN'})`);
      console.log(`      Actif: ${user.is_active ? 'Oui' : 'Non'}`);
      console.log(`      Cr√©√©: ${user.created_at}`);
      console.log(`      Modifi√©: ${user.updated_at}`);
      console.log('');
    });
    
    // 3. V√âRIFICATION DES MOTS DE PASSE
    console.log('üîë 3. V√âRIFICATION DES MOTS DE PASSE:');
    console.log('-'.repeat(50));
    
    const bcrypt = require('bcryptjs');
    const testPasswords = {
      'admin@alouloum.com': 'admin123',
      'admin@renaissance.com': 'admin123',
      'admin@gros.com': 'admin123',
      'caissier@alouloum.com': 'caissier123',
      'caissier@renaissance.com': 'caissier123',
      'superadmin@system.com': 'superadmin123'
    };
    
    for (const [email, expectedPassword] of Object.entries(testPasswords)) {
      const [userRows] = await connection.execute('SELECT password FROM users WHERE email = ?', [email]);
      if (userRows.length > 0) {
        const isValid = await bcrypt.compare(expectedPassword, userRows[0].password);
        const status = isValid ? '‚úÖ' : '‚ùå';
        console.log(`  ${status} ${email}: ${isValid ? 'VALIDE' : 'INVALIDE'}`);
      } else {
        console.log(`  ‚ùå ${email}: UTILISATEUR NON TROUV√â`);
      }
    }
    console.log('');
    
    // 4. V√âRIFICATION DU MAPPING
    console.log('üó∫Ô∏è 4. V√âRIFICATION DU STOCK MAPPING:');
    console.log('-'.repeat(50));
    
    const STOCK_MAPPING = {
      'al-ouloum': 1,
      'renaissance': 2,
      'gros': 3
    };
    
    console.log('STOCK_MAPPING dans le code:');
    Object.entries(STOCK_MAPPING).forEach(([slug, id]) => {
      const stock = stocks.find(s => s.id === id);
      console.log(`  "${slug}" ‚Üí ID ${id} (${stock ? stock.name : 'STOCK NON TROUV√â'})`);
    });
    console.log('');
    
    // 5. SIMULATION DE CONNEXIONS
    console.log('üß™ 5. SIMULATION DE CONNEXIONS:');
    console.log('-'.repeat(50));
    
    const testCases = [
      { email: 'caissier@alouloum.com', stockSlug: 'al-ouloum' },
      { email: 'caissier@renaissance.com', stockSlug: 'renaissance' },
      { email: 'admin@alouloum.com', stockSlug: 'al-ouloum' },
      { email: 'admin@renaissance.com', stockSlug: 'renaissance' },
      { email: 'admin@gros.com', stockSlug: 'gros' }
    ];
    
    for (const testCase of testCases) {
      console.log(`Test: ${testCase.email} ‚Üí ${testCase.stockSlug}`);
      
      const [userRows] = await connection.execute('SELECT * FROM users WHERE email = ? AND is_active = true', [testCase.email]);
      
      if (userRows.length === 0) {
        console.log(`  ‚ùå Utilisateur non trouv√© ou inactif`);
        continue;
      }
      
      const user = userRows[0];
      const requiredStockId = STOCK_MAPPING[testCase.stockSlug];
      const hasAccess = user.stock_id === requiredStockId;
      
      console.log(`  üë§ User: ID ${user.id}, Role: ${user.role}, Stock ID: ${user.stock_id}`);
      console.log(`  üè™ Required Stock ID: ${requiredStockId}`);
      console.log(`  ${hasAccess ? '‚úÖ' : '‚ùå'} Acc√®s: ${hasAccess ? 'AUTORIS√â' : 'REFUS√â'}`);
      
      if (!hasAccess) {
        console.log(`  ‚ö†Ô∏è  PROBL√àME: User stock_id (${user.stock_id}) ‚â† Required (${requiredStockId})`);
      }
      console.log('');
    }
    
    // 6. V√âRIFICATION DES SESSIONS/TOKENS
    console.log('üé´ 6. V√âRIFICATION DES SESSIONS/TOKENS:');
    console.log('-'.repeat(50));
    
    // V√©rifier s'il y a une table sessions
    const [sessionTables] = await connection.execute("SHOW TABLES LIKE 'sessions'");
    if (sessionTables.length > 0) {
      const [sessions] = await connection.execute('SELECT * FROM sessions ORDER BY created_at DESC LIMIT 10');
      console.log(`Sessions actives: ${sessions.length}`);
      sessions.forEach(session => {
        console.log(`  Session ID: ${session.id}, User ID: ${session.user_id}, Cr√©√©e: ${session.created_at}`);
      });
    } else {
      console.log('‚ùå Aucune table sessions trouv√©e');
      console.log('‚ÑπÔ∏è  Le syst√®me utilise localStorage c√¥t√© client');
    }
    console.log('');
    
    // 7. RECOMMANDATIONS
    console.log('üí° 7. RECOMMANDATIONS:');
    console.log('-'.repeat(50));
    
    const issues = [];
    
    // V√©rifier les utilisateurs inactifs
    const inactiveUsers = users.filter(u => !u.is_active);
    if (inactiveUsers.length > 0) {
      issues.push(`${inactiveUsers.length} utilisateur(s) inactif(s) d√©tect√©(s)`);
    }
    
    // V√©rifier les utilisateurs sans stock
    const usersWithoutStock = users.filter(u => u.role !== 'super_admin' && !u.stock_id);
    if (usersWithoutStock.length > 0) {
      issues.push(`${usersWithoutStock.length} utilisateur(s) sans stock assign√©`);
    }
    
    // V√©rifier les incoh√©rences de mapping
    let mappingIssues = 0;
    for (const testCase of testCases) {
      const user = users.find(u => u.email === testCase.email);
      if (user) {
        const requiredStockId = STOCK_MAPPING[testCase.stockSlug];
        if (user.stock_id !== requiredStockId) {
          mappingIssues++;
        }
      }
    }
    
    if (issues.length === 0 && mappingIssues === 0) {
      console.log('‚úÖ Aucun probl√®me d√©tect√© dans la base de donn√©es');
      console.log('‚úÖ Tous les mappings sont corrects');
      console.log('');
      console.log('üîç Le probl√®me est probablement dans:');
      console.log('  1. La logique de redirection c√¥t√© client');
      console.log('  2. Les probl√®mes d\'hydratation React');
      console.log('  3. Les composants de s√©curit√© ajout√©s');
    } else {
      console.log('‚ö†Ô∏è Probl√®mes d√©tect√©s:');
      issues.forEach(issue => console.log(`  - ${issue}`));
      if (mappingIssues > 0) {
        console.log(`  - ${mappingIssues} incoh√©rence(s) de mapping d√©tect√©e(s)`);
      }
    }
    
    await connection.end();
    
  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error.message);
  }
}

fullDiagnosis();
